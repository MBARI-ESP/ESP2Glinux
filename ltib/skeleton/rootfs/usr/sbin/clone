#!/bin/sh
: ${TARFLAGS:=-z}
showHelp() {
  p=$progName
  cat 2>&1 <<END
Clone ESP linux to create bootable image -- 10/9/20 brent@mbari.org
Usage:  [with optional elements in {}]
  $p {--factory} {--to destination} {source}
Flags:
  --factory  #read from the factory recovery image (archive)
      (this is equivalent specifying source archive $pristine)
  --to destination  #specifies clone output destination where:
      SD|card outputs to the SD card
      flash   outputs to internal flash memory
      /*      outputs tar archive to file at specified absolute path
      -       outputs tar archive to stdout
  --overlay  #copy system image over existing files without formatting first
  --noimage  #do NOT include a copy of the recovery image in destination
  --yes      #skip all confirmation prompts (useful if source is stdin)
  --help  #display this
Source argument:
  Read the root filesystem image from the specified directory or
  (compressed) tar archive
  If source is -, read archive from stdin
  If omitted, source defaults to the current rootfs  (i.e. / )
Environment Variables:
  TARFLAGS[=$TARFLAGS]
      overrides the default arguments to tar in reading or writing archives
Notes:
  If --to is not specified, the destination is assumed to be the storage medium
  that is currently NOT in use.  In practice, this means...
  If rootfs is the SD card, destination is internal flash and vice-versa.
  The --factory flag and source argument are mutually exclusive
Examples:
  $p
    #Without args: clones current root filesystem to unused storage medium
    #If booted from flash, creates a bootable SD card.
    #If booted from SD, writes a bootable image to the internal flash.
  $p --factory
    #As above, but writes the "pristine" factory image instead
  $p /template
    #Copy from the root filesystem at /template, making it bootable
  $p --to $pristine
    #Make the current rootfs the new factory image
  $p --to $pristine  /template
    #Make the rootfs at /template the new factory image
  $p --to flash -
    #Overwrite internal flash with rootfs image archive read from stdin
END
}

cmdErr() {
  echo "$progName: $1" >&2
  exit 2
}

#set -x
export progName=`basename $0`
export pristine=/boot/rootfs.tgz
parsed=`getopt -n \
  "$progName" -al factory,to:,help,noimage,overlay,yes -o '' -- "$@"` || exit $?
eval set -- $parsed
unset dest factory noimage overay yes
overlay=FORMAT
while [ "$1" ]; do
  opt=$1
  shift
  case "$opt" in
    --)
      break
  ;;
    --to)
      [ $dest ] && cmdErr "conflicting multiple '--to' options"
      dest=$1
      shift
  ;;
    --factory)
      factory=1
  ;;
    --noimage)
      noimage=1
  ;;
    --overlay)
      overlay=OVERLAY
  ;;
    --yes)
      yes=1
  ;;
    --help)
      showHelp
      exit 3
  ;;
    *)
      cmdErr "internal parsing error at \"$@\""
  esac
done
[ "$2" ] && cmdErr "extra argument(s) -- $@"
src=$1
[ "$factory" ] && {
  [ "$src" ] && cmdErr "'--factory' conflicts with specified source '$1'"
  src=$pristine
}
[ "$src" ] || src=/   #default to current rootfs

fsDev() {  #output block device containing file
  mountpoint -d "$1"
}

macAddr() {
  cfg=`/sbin/ifconfig ${1-eth0}` || return $?
  echo $cfg | {
    read dev link encap HWaddr mac extra
    echo $mac
  }
}

macSuffix() {
  echo $1 | {
    IFS=: read one two three four five six extra
    echo $five$six
  }
}

addImage() {
#unless noimage, if $src is (archive) file, copy it to given boot directory
  boot=$1
  [ -z "$noimage" -a -d "$boot" -a -f "$src" ] && {
    echo Copying recovery archive $src to ${boot#/var/run/}
    cp $src $boot
  }
}

writeStream() {
  #write tar archive (of rootfs based at) $1 to stdout
  #remaining optional args are flags passed to tar
  top=/var/run/clonetop  #this mountpt should be in a tmpfs
  mkdir -p $top
  trap "kill \$tarpid; echo ' -- ABORTING...' >&2; wait; sync; sleep 2;\
        cd; umount $top && rmdir $top; exit 5" TERM INT HUP QUIT
  mount --bind $1 $top && #avoid copying other filesystems (e.g. /proc /dev)
  cd $top &&
  shift || exit $?   #note that * excludes .SWAP
  tar -c $* --anchored \
    --exclude=var --exclude=tmp --exclude=card --exclude=lost+found -- * &
  tarpid=$!; wait $tarpid; tarstat=$?
  cd && umount $top && rmdir $top &&
  trap TERM INT HUP QUIT && return $tarstat
}

writeRootFS() {
  #copy rootfs or tar archive at $src to $1
  dst=$1
  if [ -d "$src" ]; then  #assume src is top of rootfs
    if [ -d "$dst" ]; then
      echo Copying system at $src to ${dst#/var/run/} ...
      [ `fsDev $dst` = `fsDev $src` ] &&
        cmdErr "$src and $dst must be on different filesystems"
      writeStream $src | tar xC $dst
    else
      echo Archiving system at $src to $dst ...
      asrc=`realpath $src` &&
      if [ -e "$dst" ]; then
        adst=`realpath $dst`
      else
        adst=$dst
      fi &&
      writeStream $src $TARFLAGS --exclude=${adst#$asrc/} >$dst
    fi
  else  #assume src is tar archive of rootfs
    echo Extracting archive from $src to ${dst#/var/run/} ...
    tar $TARFLAGS -C $dst -xf $src
  fi || exit $?
}

mkSDcard() {
  #make a bootable SDcard from rootfs image at $src
  #1st arg is the mountpt for the new SD card's rootfs under /var/run
  #2nd arg is the standard mountpt for an existing SD card
  #3rd arg is the standard mountpt for the FAT kernel partition
  dst=$1
  card=$2
  kern=$3
  mmc=/dev/mmcblk0p
  fuser -sm ${mmc}* && {
    cat 2>&1 <<END
SD card is in use
 ==> reboot, then remove card while kernel reloads from Internal SPI Flash
END
    exit 3
  }
  umount $dst $card $kern 2>/dev/null
  rm -rf $dst
  mkdir -p $dst
  grep "^$mmc" /proc/mounts /proc/swaps && {
    echo "SD card is mounted or serving as swap space (per above)" 2>&1
    exit 3
  }
  kernPart=${mmc}1   #MS-DOS FAT partition for Linux kernel
  rootPart=${mmc}2   #Root filesystem
  bootPart=${mmc}3   #BootIt partition for U-boot loader

  MAC=`macAddr` || exit 3
  ID=`macSuffix $MAC` || exit 3
  [ "$ID" ] || {
    echo "Connect determine Ethernet MAC address" 2>&1
    exit 3
  }
  echo This board\'s ethernet MAC address = $MAC
  case "$MAC" in
    00:1[aA]:[fF]1:*) ;;
    *) cat >&2 <<END
!!!  MAC addresses for these boards should begin with 00:1a:f1
!!!  First, reboot into U-Boot to assign the board the MAC address
!!!  printed its barcode label using these U-Boot commands:
>>>    edit ethaddr
>>>    edit: 00:1a:f1:xx:yy:zz  #input hex digits from the printed label
>>>    save
>>>    reset
END
  esac
  [ "$yes" ] || {
    read -p "$overlay system image onto SDcard? [yes/No] " yn
    case $yn in
      yes) ;;
      [y/Y]*) cmdErr "Answer 'yes' to $overlay SDcard";;
      * ) exit 2
    esac
  }
  swapLabel=
  [ "$overlay" = "FORMAT" ] && {
    set -e
    mkdosfs -n ESPBOOT$ID  $kernPart
    mkfs.ext4  -L ESPROOT-$ID  $rootPart
    tune2fs -c0 -i0  $rootPart
    echo
    swapLabel=ESPSWAP-$ID
  }
  set -e
  mount $rootPart $dst
  writeRootFS $dst
  cd `dirname $dst`
  mkcardroot `basename $dst` $swapLabel  #tweak symlinks and create swap file
  set +e

  echo "Installing system files to make SD card bootable"
  bootable=1
  cp $dst/boot/u-boot.bin  $bootPart || {
    echo "Warning:  Could not install U-Boot on SD card!" 2>&1
    unset bootable
  }
  addImage $dst/boot
  mount $kernPart $kern &&
  cp $dst/boot/* $kern &&   #copy boot files to FAT partition
  [ -r $kern/uImage ] || {
    echo "Warning:  SD card is missing Linux kernel!" 2>&1
    unset bootable
  }
  echo "Creating ESP app data directories on SD card:"
  cd $dst/home
  for user in *; do  #owner and group must match home dir's
    uLog="/var/log/$user"
    dstLog="$dst/$uLog"
    if [ -d "$dstLog" ]; then
      echo " Preserving $uLog"
    else
      echo "   Creating $uLog"
      mkdir $dstLog &&
        chown `find $user -maxdepth 0 -printf "%u:%g"` $dstLog
    fi
  done
  set -e
  cd

  echo "Cleaning up"
  sync
  umount $kern $dst
  rmdir $dst
  [ "$bootable" ] && cat <<END
SD card should now be bootable.  It may be safely removed.
To boot from SD card:
  Move the middle (usually RED) boot jumper to 'SD'
  reboot and hit <Control-C> to enter U-Boot, then type:

  edit bootcmd
  edit: run sdBoot   #To make the SD card the default boot device

  save
  reset
END
}

mkFlash() {
  #write a bootable internal flash from rootfs image at $src to $1
  dst=$1
  mtd=/dev/mtd
  mtdblock=${mtd}block
  rootDev=${mtd}2
  rootPart=${mtdblock}2   #Root filesystem
  bootPart=${mtdblock}3   #Boot partition (preloaded w/U-boot and Linux kernel)
  fuser -sm $rootPart && {
    echo "Internal Flash is in use" 2>&1
    exit 3
  }
  umount $dst 2>/dev/null
  grep "^$rootPart" /proc/mounts /proc/swaps && {
    echo "Internal Flash is mounted or acting as swap space (per above)" 2>&1
    exit 3
  }
  [ "$yes" ] || {
    read -p "$overlay Internal Flash memory with new system image? [yes/No] " yn
    case $yn in
      yes) ;;
      [y/Y]*) cmdErr "Answer 'yes' to $overlay internal flash";;
      * ) exit 2
    esac
  }
  [ "$overlay" = "FORMAT" ] && {
    set -e
    flash_eraseall  $rootDev    #erase internal linux root filesystem
    mount $rootPart $dst
    set +e
    echo
  }
  writeRootFS $dst            #populate rootfs

  var=$dst/card/var
  mkdir $dst/card $var $var/log $var/run $var/lock && {
    echo "Installing /card symlinks"
    ln -s /card/tmp $dst/tmp
    ln -s /card/var $dst/var
  }
  addImage $dst/boot
  echo "Cleaning up"
  sync
  umount $dst
  cat <<END
To finish board's configuration:  reboot, <Control-C> into U-Boot, and type:

  run  flashSDuboot     #save U-Boot binary in internal flash

  edit ethaddr
  edit: 00:1a:f1:xx:yy:zz  #set to the Ethernet MAC address printed on CPU board

  edit bootcmd
  edit: run flashBoot   #To make internal SPI flash boot the default

  run  flashSDkernel    #save Linux kernel binary in internal flash

  [Move the middle (usually RED) boot jumper to 'SPI']
  reset
END
}

[ "$dest" ] || {  #determine destination storage should be
  case `fsDev /` in
    31:*) dest=SDcard;;
    *)    dest=FLASH
  esac
}


export src noimage overlay
case "$dest" in
  SD|sd|CARD|card|SDcard|sdcard|sdCard)
                      mkSDcard /var/run/SDcard /card /boot;;
  flash|FLASH|Flash)  mkFlash /flash;;
  /*)                 writeRootFS $dest;;
  -|stdout)
    [ -t 1 ] && cmdErr "cannot archive $src to terminal"
    [ -d "$src" ] || cmdErr "source must be a directory when writing stdout"
    writeStream $src $TARFLAGS;;
  *)
   cmdErr "'--to' must be followed by 'SD', 'flash', absolute path or 'stdout'"
esac
