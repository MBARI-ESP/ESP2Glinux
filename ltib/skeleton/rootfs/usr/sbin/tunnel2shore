#!/bin/sh
self=`basename $0`
. /usr/share/netutils.sh
: ${HOME:=/root} #in case invoked from inittab
: ${noGateDelay:=300}  #retry delay if no gateway
: ${newGateDelay:=30}  #retry delay if gateway changed
: ${pidFn:=$run/$self.pid}
: ${portFn:=/var/etc/$self.port}  #stores last TCP port # assigned us
#portFn=/dev/null   #uncomment to query for our remote port # on each connect
: ${traceFn=$run/trace/$self}
: ${shore:=ESPshore}
: ${shoreUser:=`hostname`}
: ${shoreSSH:="-p2323 $shoreUser@$shore"}
[ "$1" ] && { cat >&2 <<END
Bring up ssh tunnel to $shore for ssh and smtp -- 4/18/22 brent@mbari.org
Retries every $noGateDelay seconds until internet is available
END
  exit 9
}
tunHostsFn=$run/$self.hosts
kids=$run/$self.kids-$$
err=$run/$self.err
export HOME

killJobs() {
#send all jobs specified signal
  jobs -p > $kids  #must run jobs built-in in the current shell!!
  local pids=`cat $kids` && rm -f $kids && [ "$pids" ] && kill $* $pids
}

SSH() {  #start TCP keepalives after idle 3 minutes
  ssh -SK180 "$@" 2>$err </dev/null
# ssh -oBatchMode=yes -oServerAliveInterval=20 "$@" 2>$err </dev/null
}

[ -w $traceFn ] && {
  { date; echo $0 "$@"; env; } >>$traceFn
  exec 2>>$traceFn
  set -x
}

#restart if network changed  (pid does not change!)
trap "killJobs; wait; rm -f $tunHostsFn; exec $0" HUP
#Empty .pid file to delay restart after waiting until tunnel is closed.
trap "killJobs; rm -f $tunHostsFn; wait; >$pidFn; exec $0" USR1
#clean up on request to exit
trap "rm -f $tunHostsFn; hostsUp; rm -f $pidFn" EXIT
trap "killJobs; wait; exit 129" TERM INT QUIT

if [ -s "$pidFn" ];then
  #terminate any other instances
  oldPID=`cat $pidFn 2>/dev/null` && [ "$oldPID" != $$ ] && {
    kill "$oldPID" 2>/dev/null && {
      secs=20
      while let secs--; do
        sleep 1
        kill -0 $oldPID || break
      done
    }
    echo $$ >$pidFn
  }
  fuser -sk 25/tcp  #in case previous tunnel did not close
elif [ -e "$pidFn" ]; then  #empty .pid file
  echo $$ >$pidFn
#  echo "Reopening $shore tunnel in $newGateDelay seconds"
  sleep $newGateDelay
else  #missing .pid file
  echo $$ >$pidFn
fi

sleep 5  #wait for net config to stabilize
tag="`basename $0`[$$]"
[ "$(topIf)" ] || {
#  logger -t $tag -p warning "No Gateway -- reopening $shore tunnel in $noGateDelay seconds"
  sleep $noGateDelay
}
[ "$(topIf)" ] && {
  #ensure shore and mail resolve to localhost
  #(done this way in case netutils updates /etc/hosts first)
  tunHosts='127.0.0.1 shore mail'
  echo $tunHosts >$tunHostsFn
  grep -q "$tunHosts" /etc/hosts || echo $tunHosts >>/etc/hosts

  local=localhost
  tunnels="-L873:$local:873 -L25:$local:25"  #smtp should forwarded last
  tunArgs="-oExitOnForwardFailure=yes -yN $shoreSSH"
  export DROPBEAR_PASSWORD=  #fail instead of prompting for a password

  openTunnel() {
  #open tunnel from shore's $1 port to our local ssh port
  #tunnel from shore's 1$1 port ($1 prefixed by 1) to our espclient port
    SSH -R:$1:$local:22 -R:1$1:$local:9999 $tunnels $tunArgs
  }

  #first, try the port previously assigned us
  logger -t $tag "Opening tunnel to $shore"
  [ -s $portFn ] && sshPort=`cat $portFn` &&
      openTunnel $sshPort || {
    sshPort=`SSH -y $shoreSSH tunnel close` && {  #request far side close tunnel
      echo $sshPort >$portFn     #remember the port assigned us
      openTunnel $sshPort
    }
  }
} #if $(topIf)

#This will run when the tunnel collapses or cannot be built
#ifdown cellularIface
#ifup celluarIface
