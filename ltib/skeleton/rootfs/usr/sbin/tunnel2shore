#!/bin/sh
self=`basename $0`
: ${HOME:=/root} #in case invoked from inittab
: ${noGateDelay:=600}  #retry delay if no gateway
: ${pidFn:=/var/run/$self.pid}
: ${portFn:=/var/etc/$self.port}  #stores last TCP port # assigned us
#portFn=/dev/null   #uncomment to query for our remote port # on each connect
: ${traceFn=/var/run/trace/$self}
: ${shore:=ESPshore}
: ${shoreUser:=`hostname`}
: ${shoreSSH:="-p2323 $shoreUser@$shore"}
[ "$1" ] && { cat >&2 <<END
Bring up ssh tunnel to $shore for ssh and smtp -- 12/16/19 brent@mbari.org
Retries every $noGateDelay seconds until internet is available
END
  exit 9
}
tunHosts=/var/run/$self.hosts
export HOME
[ -w $traceFn ] && {
  { date; echo $0 "$@"; env; } >>$traceFn
  exec 2>>$traceFn
  set -x
}

#restart if network changed  (pid does not change!)
trap "pkill -P $$; wait; rm -f $tunHosts; exec $0" HUP
#Empty .pid file to delay restart after waiting until tunnel is closed.
trap "pkill -P $$; rm -f $tunHosts; wait; >$pidFn; exec $0" USR1
#clean up on request to exit
trap "pkill -P $$; wait; rm -f $tunHosts $pidFn; exit 129" TERM INT QUIT

if [ -s "$pidFn" ];then
  #terminate any other instances
  oldPID=`cat $pidFn 2>/dev/null` && [ "$oldPID" != $$ ] && {
    kill "$oldPID" 2>/dev/null && {
      secs=20
      while let secs--; do
        sleep 1
        kill -0 $oldPID || break
      done
    }
    echo $$ >$pidFn
  }
  fuser -sk 25/tcp  #in case previous tunnel did not close
elif [ -e "$pidFn" ]; then  #empty .pid file
  echo $$ >$pidFn
#  sleep 20
#  echo "Reopening $shore tunnel in $noGateDelay seconds"
  sleep $noGateDelay
else  #missing .pid file
  echo $$ >$pidFn
fi

topIf() {
  #output the name of the top priority network interface
  local iface
  read -r iface gateway 2>/dev/null </etc/resolv.conf &&
  echo ${iface###}
}

sleep 5  #wait for net config to stabilize
tag="`basename $0`[$$]"
while [ ! "$(topIf)" ]; do
#  logger -t $tag -p warning "No Gateway -- reopening $shore tunnel in $noGateDelay seconds"
  sleep $noGateDelay
done

#ensure shore and mail resolve to localhost
echo '127.0.0.1 shore mail' >$tunHosts
cat $tunHosts >>/etc/hosts

tunnels="-L873:$shore:873 -L25:$shore:25"  #smtp should forwarded after rsync
tunArgs="-oExitOnForwardFailure=yes -ygNK 180 $shoreSSH"
local=localhost:22

#first, try the port previously assigned us
logger -t $tag "Opening tunnel to $shore"
[ -s $portFn ] && ssh -R`cat $portFn`:$local $tunnels $tunArgs || {
  sshPort=`ssh -y $shoreSSH tunnel close` && {  #request far side close tunnel
    echo $sshPort >$portFn     #remember the port assigned us
    ssh -R$sshPort:$local $tunnels $tunArgs
  }
}
