#!/bin/sh
#
# network	stop, restart, start, the networking
# subsequent args specify a list of interfaces

op="$1"
shift
[ -z "$1" ] && grep -q ^"/dev/root / nfs " /proc/mounts && {
  echo "Skipping network configuration so as not to disturb nfs root filesystem"
  exit 4
}

order=/etc/sysconfig/if-order
[ -r $order ] || exit 3
. $order

case "$op" in
  start)
    . /usr/share/ifupfn.sh
    if [ "$1" ]; then
      for dev; do
        ifup $dev
      done
    else
      > /etc/resolv.conf
      > /etc/hosts
      for dev in $START; do (
        unset BOOTPROTO IPADDR NETMASK BROADCAST DHCPNAME
        unset NETWORK GATEWAY MTU AUTOSTART
        unset hosts resolv_conf ifPrep ifPost
        IFNAME="$dev"
        cfg=$syscfg/ifcfg-$dev
        [ -r $cfg ] || cfg=$syscfg/if-default
        . $cfg
        ifup_function
      ) done
      exec /lib/udev/catchup  #other interfaces start in parallel as discovered
    fi
;;
  stop)
    . /usr/share/ifdownfn.sh
    globIfs() {
    #output list of valid interfaces from given template
      oldWD=`pwd`
      cd /sys/class/net
      for dev; do  #filter out unmatched globs
        [ "$dev" = "${dev/\*}" ] && echo $dev
      done | awk '!seen[$0]++'
      cd "$oldWD"
    }

    inStart() {
    #return success if $1 appears in other args
    #search $START if no other args provided
      [ "$1" ] && {
        key=$1
        shift
        [ "$1" ] || set -- $START
        for item; do
          [ "$item" = "$key" ] && return 0
        done
      }
      return 1
    }

    ifs() {
    #output list of all UP interface names matching given grep regex
    #excluding those in $START list
      selection=${1-'^[[:alpha:]]'}
      ifconfig | grep $selection | while read -r ifName details; do
        inStart $ifName || echo $ifName
      done
    }

    pppIfs() {
    #output list of interfaces with running ppp daemons
    #excluding those in $START list
      pppSpec='/var/run/ppp[0-9]*.pid'
      pidfns=`echo $pppSpec`
    set -f
      [ "$pidfns" != "$pppSpec" ] && {
        for pidFn in $pidfns; do
          ppp=`basename $pidFn`
          ppp=${ppp%.pid}
          inStart $ppp || echo $ppp
        done
      }
    set +f
    }

    takeDown() {
    #take down the specified interfaces
    #do all in parallel if inParallel set
      unset bg
      [ $inParallel ] && bg='&'
      for dev; do(
        cfg=$syscfg/ifcfg-$dev
        [ -r $cfg ] || cfg=$syscfg/if-default
        . $cfg  #never stop 'ignored' or 'inittab' interfaces
        [ "${AUTOSTART#[iI]}" = "$AUTOSTART" ] &&
          ifDown $dev force $bg
      )done
      wait
    }

    reverse() {
      out=
      for arg; do out="$arg $out"; done
      echo $out
    }

    #update routing only ONCE, after deconfiguring interfaces
    trap "gateUp; hostsUp; exit" EXIT INT TERM QUIT HUP

    if [ "$1" ]; then  #stop only the specified interfaces
      takeDown "$@"
    else  #stop all interfaces
      inParallel=  takeDown `globIfs $STOP`
      export inParallel=yes
      takeDown `pppIfs`  #all ppp interfaces
      takeDown `ifs '^[[:alpha:]][[:alpha:][:digit:]]*:'` #all aliases
      takeDown `ifs`
      inParallel=  takeDown `reverse $START`
    fi
;;

  restart)
       $0 stop	"$@"
       $0 start "$@"
;;
  *)
       echo "usage: start|stop|restart {interfaces}"
esac
