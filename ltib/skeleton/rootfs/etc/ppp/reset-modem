#!/bin/sh
# reset modem via whatever means we can
#  if an esp server is running, reset modem via an espclient, otherwise,
#    try writing commands directly to the sleepy board's microcontroller

offSecs=${1-5}           #default to 5 seconds w/pwr off
gateway=${2-/dev/I2Cgate}
esp=${3-esp}    #esp user for case where no espclient available
mRstCmd="/usr/sbin/sleepyCmd --device=$gateway resetModem $offSecs"
tag=`basename $0`

[ "$noUSBreset" ] ||
  resetUSBunlessBusy $offSecs >/dev/null &  #for USB powered modems

[ -c "$gateway" ] || {
  logger -st$tag -perr "Missing $gateway!"
  exit 9
}

users=`fuser -u $gateway 2>&1` && echo $users | tr \(\) " " | {
  while read dev espPid espUser ignored; do
    if [ -n "$espPid" -a -n "$espUser" ]; then
      logger -t$tag -pwarn "Cycling power via $espUser's espclient"
      result=$(exec 5>&1; su - $espUser >&2 <<EOS
        espclient --server=$espPid $tag >&5 <<EOC
          Gate.cycleModemPower! $offSecs
EOC
EOS
      ) && {
        set -- $result
        [ "$1" = "=>" ] && shift  #arrow prefix is now optional
        [ -z "$2" -a "$1" -eq "$offSecs" ] && exit
      }
    fi
  done
  exit 6 #failed to cycle modem's power via an espclient
} && exit

# reset modem directly first as user esp
#   failing that, output warning in log and try resetting as root
logger -t$tag "No espclient -- resetting via $gateway"
errmsg=`su $esp -c "$mRstCmd" 2>&1 >&-` && exit
logger -t$tag -pwarn "Retrying as root after $esp failed with $errmsg"
errmsg=`$mRstCmd 2>&1 >&-` && exit
logger -t$tag -perr "also failed as root -- $errmsg"
exit 5
