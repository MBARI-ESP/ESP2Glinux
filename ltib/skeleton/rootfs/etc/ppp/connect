#!/bin/sh
#  connect to specified cellular network

tag=`basename $0`
traceFn=/var/run/trace/$tag
[ -w $traceFn ] && {
  (date; echo $0 "$@"; env) >>$traceFn
  exec 2>>$traceFn
  set -x
}

cellular=$1
resetHoldOff=${2-300}    #fail 5 minutes after resetting modem
offSecs=${3-5}           #default to 5 seconds w/pwr off
gateway=${4-/dev/I2Cgate}
lastResetFn=/var/run/`basename $gateway`.reset

[ "$cellular" ] || {
cat << EOS
 $tag:  attach to specified cellular network.  Specify...
   gprs:      for AT&T or T-Mobile (use APN in \$APN environment variable)
   verizon:   for Verizon CDMA network (w/MultiTech modem)
 stdin and stdout should be redirected to the cellular modem
 Modem will be power cycled if it appears to be hung.
 optional 2nd arg is the number of seconds to wait after resetting modem
  if < 0, retry after the absolute value of seconds specified
  [defaults to $resetHoldOff seconds]
 optional 3rd arg is the number of seconds to hold power off
  [defaults to $offSecs seconds]
 optional 4th arg is the device connected to the ESP I2C gateway
  [defaults to $gateway]
EOS
exit 1
}
cd `dirname $0` || exit 2

until /usr/sbin/chat -vf $cellular-detach.chat; do
  logger -t$tag "Modem will not detach"
  resetDelay=$resetHoldOff
  [ $resetDelay -lt 0 ] && resetDelay=$((-($resetDelay)))
  now=`date +%s`
  lastReset=`head -n1 $lastResetFn 2>/dev/null`
  [ "$lastReset" ] && sinceReset=$(($now-$lastReset))
  if [ $? != 0 -o "$sinceReset" -ge $resetDelay -o "$sinceReset" -lt 0 ]; then
    echo $now >$lastResetFn
    `dirname $0`/reset-modem $offSecs $gateway
  else
    resetDelay=$(($resetDelay - $sinceReset))
  fi
  [ $resetHoldOff -ge 0 ] && {
    [ $resetHoldOff -ne 0 ] && {
      logger -t$tag "Waiting $resetDelay seconds before reporting failure"
      sleep $resetDelay
    }
    exit 7
  }
  logger -t$tag "Waiting $resetDelay seconds before retrying..."
  sleep $resetDelay
done
rm -f $lastResetFn
exec /usr/sbin/chat -vEf $cellular-attach.chat
