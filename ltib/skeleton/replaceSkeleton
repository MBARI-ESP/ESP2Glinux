#!/bin/bash -e
#set -x
[ -z $1 ] && {
  cat <<EOS >&2
Replace ltib skeleton in the rootfs the directory given as an argument
with the MBARI one for the ea31xx base board  -- 9/8/15 brent@mbari.org
EOS
  exit 2
}

dst=$1
here=`dirname $0`

etc=$1/etc
rcd=$etc/rc.d
rm $2 $rcd/rc.conf $rcd/rcS $rcd/rc.serial $rcd/rc.modules $rcd/init.d/* || {
  cat <<EOS >&2
Looks like $dst was not written by ltib or has already had its skeleton replaced
Invoke with -f as 2nd argument to force replacement anyway (this is dangerous!)
EOS
  exit 2
}
rm -rf $dst/home/* $dst/lost+found $dst/mnt/*  #remove ltib's users & mount pts


mksymlinks() {
  [ -z "$1" -o "$1" = "--help" ] && {
cat <<EOS >&2
    Usage: mksymlinks base_directory {precmd}
Make symbolic links specified on stdin relative to specified base directory
Each line of stdin is of the form:
"symlink Name" -> "symlink Target"
Lines that lack the " -> " are ignored.  They may function as comments.
If the "symlink Target" is omitted, a directory called "symlink Name is created"
precmd is an optional preparation command.
Commonly, it is "rm -f" to remove any existing link beforehand
EOS
  exit 1
  }

  mkdir -p $1 && cd $1 || exit 4

  while read linkName arrow linkTarget; do
    [ "$arrow" = '->' ] && {
      if [ "$linkTarget" ]; then
        dir=`dirname $linkName`
        [ "$2" ] && eval $2 $linkName
        [ -d $dir ] || mkdir -p $dir || exit 2
        rm -rf $linkName &&
        ln -s $linkTarget $linkName || exit 3
      else
        mkdir -p $linkName || exit 4
      fi
    }
  done
}

rm $dst/sbin/{halt,reboot,poweroff} `find $dst -name "*ip6t*"`
rm $dst/usr/bin/{ubi*,*jffs2*}  #remove support for ubi and jffs2 filesystems
rm $dst/usr/lib/{*.so.bak,*.so_orig,e2initrd*}
rm $dst/usr/sbin/tunelp
rm $dst/usr/bin/{unubi,pddcustomize,chkdupexe,*ftl_*,setarch,linux{32,64}}
rm $dst/usr/bin/{recv_image,rfd{dump,format},cytune}  #ubi + cyclades serial
rm $dst/usr/bin/gdbtui
rm $dst/etc/devfsd.conf
rm $dst/etc/udhcpd.conf
rm $dst/etc/sysctl.conf
rm $dst/etc/modprobe.conf.dist
chmod a-x $dst/etc/ltib-release

# preserve the initial state of the /var dir so new sd cards can be initialized
initial=etc/initial
log=$initial/var/log
mkdir $dst/$initial &&
mv $dst/var $dst/$initial &&
cp -a --no-preserve=ownership $here/rootfs/.  $dst &&
mksymlinks $dst < $here/symlinks &&
mkdir -p $log && chmod g-w $log && cd $log && {
      d=`date  -uIseconds` &&
      echo ${d%+*}UTC > birth &&
      echo "Image Built at  `date`"
}
