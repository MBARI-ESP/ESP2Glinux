Binary files linux-2.6.33/arch/arm/boot/compressed/piggy.gzip and linux-2.6.33.modified/arch/arm/boot/compressed/piggy.gzip differ
diff --exclude CVS --exclude .git -uNr linux-2.6.33/arch/arm/mach-lpc313x/ea313x.c linux-2.6.33.modified/arch/arm/mach-lpc313x/ea313x.c
--- linux-2.6.33/arch/arm/mach-lpc313x/ea313x.c	2017-12-07 19:16:27.243833762 -0800
+++ linux-2.6.33.modified/arch/arm/mach-lpc313x/ea313x.c	2017-12-06 18:32:39.373957371 -0800
@@ -91,13 +91,25 @@
 
 
 
-// board identification code read at reset
-static uint8_t boardID;
+// default to reading board identification code from GPIOs 11-19
+static int __initdata boardID = -1;
 
-static inline int mbariBoard(uint8_t id)
+static int __init setBoardID(char *str)
+{
+	char *end;
+	unsigned long override = simple_strtoul(str,&end,0);
+    if (end > str)
+    	boardID = override;  //valid ID from kernel cmdline overrides GPIOs
+	return 1;
+}
+__setup("board=", setBoardID);
+
+
+static inline int mbariBoard(int id)
 // return 1 for mbariBoard, 0 for non-mbari (Embedded Artists?) origin board
 {
-  return id == 0 || id == 0104;
+  uint8_t low = id;
+  return low == 0 || low == 0104;
 }
 
 
@@ -148,6 +160,12 @@
     gpio_export(gpio, 0);  //do not allow redefinition as an output
 }
 
+static void exportBootI(int gpio, const char *name)
+{
+    requestGPI(gpio, name);
+    gpio_export(gpio, 1);  //allow redefinition as an output
+}
+
 static int mci_init(u32 slot_id, irq_handler_t irqhdlr, void *data)
 {
 	/* disable power to the slot */
@@ -764,11 +782,12 @@
 
 static void __init init_irq(void)
 {
-  boardID = (GPIO_STATE(IOCONF_FAST_GPIO)>>firstSerialGPIO) & allSerialChannels;
+  if (boardID < 0) //read GPIOs to identify carrier board type
+    boardID = (GPIO_STATE(IOCONF_FAST_GPIO)>>firstSerialGPIO)&allSerialChannels;
   if (mbariBoard(boardID)) {
     replace_irq(IRQ_DM9000_ETH_INT, EVT_GPIO3, EVT_ACTIVE_LOW);
     replace_irq(IRQ_EA_VBUS_OVRC, EVT_NAND_NCS_2, EVT_ACTIVE_LOW);
-    if (boardID) //PC/104 carrier with octal USART on the ESP2G baseboard
+    if (boardID & 0xff) //PC/104 carrier with octal USART on the ESP2G baseboard
       replace_irq(IRQ_XR16788_INT, XR_EVT, EVT_ACTIVE_HIGH);
     else         //ESP 3G with on board octal USART
       replace_irq(IRQ_XR16788_INT, EVT_mNAND_RYBN3, EVT_ACTIVE_LOW);
@@ -793,12 +812,11 @@
       Loading the KS8851 driver from a kernel module ensures this
   */
   printk(signon);
+  ea_add_device_ks8851(timing);
   SYS_MUX_UART_SPI = 1;  //SPI CS1 & CS2 lines replace USART CTS & RTS
   requestGPO(GPIO_MUART_CTS_N, "ds3234CS", 1);
   requestGPO(GPIO_MUART_RTS_N, "SPIdevCS", 1);
   spi_register_board_info(&rtc, 1);
-  requestGPI(GPIO_GPIO2, "boot2");
-  gpio_export(GPIO_GPIO2, 1);  //allow redefinition as an output
 
   //I2STX_WS0 should be wired to USB_ID
   //early PC104 carrier boards mistakenly connect NAND_RYBN2 to USB_ID
@@ -812,9 +830,22 @@
 
   gpio_sysfs_set_active_low(GPIO_NAND_NCS_2, 1);
   exportGPI(GPIO_NAND_NCS_2, "USBoverload");
-  exportGPO((lpc313x_USBpower = GPIO_GPIO19), "USB+5V", 1);
-  exportGPO((lpc313x_LED = GPIO_GPIO20), "CPULED", 0);
-  ea_add_device_ks8851(timing);
+  
+  //boot2 is normally pulled high.
+  //this keeps USB PWR off during reset (when GPIO19 is not available)
+  lpc313x_USBpower = GPIO_GPIO2;
+  if (!(boardID & 0x1000)) {  //normal case with USB PWR control on GPIO19
+    exportBootI(GPIO_GPIO2, "boot2");
+    lpc313x_USBpower = GPIO_GPIO19;
+  }
+  exportGPO(lpc313x_USBpower, "USB+5V", 1);
+
+  lpc313x_LED = GPIO_GPIO0; //(in case GPIO20 is not available)
+  if (!(boardID & 0x2000)) {  //normal case with dedicated output on GPIO20
+    exportBootI(GPIO_GPIO0, "boot0");
+    lpc313x_LED = GPIO_GPIO20;
+  }
+  exportGPO(lpc313x_LED, "CPULED", 0);
 }
 
 
@@ -841,7 +872,7 @@
 #endif
 
        /* add other devices depending on carrier board type */
-  switch (boardID) {
+  switch (boardID & 0xff) {
     case 0:  /* ESP 3G baseboard */
       requestGPO(PeripheralReset, "PeripheralReset", 0);  /* assert reset */
       gpio_export(PeripheralReset, 1);   /* echo low > gpio58/direction */
@@ -882,7 +913,8 @@
 	      /* set the I2SRX_WS0 pin as GPIO_IN for vbus overcurrent flag */
       gpio_sysfs_set_active_low(GPIO_I2SRX_WS0, 1);
       exportGPI(GPIO_I2SRX_WS0, "USBoverload");
-      requestGPO(GPIO_GPIO2, "CPULED", 1);
+      exportBootI(GPIO_GPIO0, "boot0");
+      exportGPO(GPIO_GPIO2, "CPULED", 1);
       ea_add_device_dm9000();
       nr_uarts = 1;  //avoids having unintialized ports under /dev/ttyS*
   }
@@ -894,7 +926,7 @@
   wait up to 1 second for RTC to deassert reset
 */
 {
-  if (boardID == 0) {  //only the 3G host board requires this delay
+  if (!(boardID & 0xff)) {  //only the 3G host board requires this delay
     unsigned consecutive = 0;
     unsigned long resetDone = jiffies+HZ;
     while (jiffies < resetDone)
@@ -916,21 +948,11 @@
 
 #if defined(CONFIG_MACH_EA3152)
 MACHINE_START(EA3152, "NXP EA3152")
-	/* Maintainer: Durgesh Pattamatta, NXP */
-	.phys_io	= IO_APB01_PHYS,
-	.io_pg_offst	= (io_p2v(IO_APB01_PHYS) >> 18) & 0xfffc,
-	.boot_params	= 0x30000100,
-	.map_io		= ea313x_map_io,
-	.init_irq	= lpc313x_init_irq,
-	.timer		= &lpc313x_timer,
-	.init_machine	= ea313x_init,
-MACHINE_END
-#endif
-
-
-
-#if defined(CONFIG_MACH_EA313X)
+#elif defined(CONFIG_MACH_EA313X)
 MACHINE_START(EA313X, "NXP EA313X")
+#else
+#error Must select either EA313X or EA3152
+#endif
 	/* Maintainer: Durgesh Pattamatta, NXP */
 	.phys_io	= IO_APB01_PHYS,
 	.io_pg_offst	= (io_p2v(IO_APB01_PHYS) >> 18) & 0xfffc,
@@ -940,5 +962,3 @@
 	.timer		= &lpc313x_timer,
 	.init_machine	= ea313x_init,
 MACHINE_END
-#endif
-
diff --exclude CVS --exclude .git -uNr linux-2.6.33/arch/arm/mach-lpc313x/generic.c linux-2.6.33.modified/arch/arm/mach-lpc313x/generic.c
--- linux-2.6.33/arch/arm/mach-lpc313x/generic.c	2017-12-07 19:16:27.235833960 -0800
+++ linux-2.6.33.modified/arch/arm/mach-lpc313x/generic.c	2017-12-06 18:08:35.245557138 -0800
@@ -195,13 +195,11 @@
 
 static void lpc313x_export_bootsel(void) {
 	/* pre-request and export boot mode selector pins */
-	gpio_request(GPIO_BOOT0, "boot0");
-	gpio_direction_input(GPIO_BOOT0);
 	gpio_export(GPIO_BOOT0, 1);
 	gpio_request(GPIO_BOOT1, "boot1");
 	gpio_direction_input(GPIO_BOOT1);
 	gpio_export(GPIO_BOOT1, 1);
-        //boot2's direction depends on baseboard type -- init it later..
+    //boot2's and 0's direction depends on baseboard type -- init it later..
 }
 
 
