diff --exclude CVS --exclude .git -uNr linux-2.6.33/arch/arm/mach-lpc313x/cgu.c linux-2.6.33.modified/arch/arm/mach-lpc313x/cgu.c
--- linux-2.6.33/arch/arm/mach-lpc313x/cgu.c	2014-12-05 15:26:01.994219248 -0800
+++ linux-2.6.33.modified/arch/arm/mach-lpc313x/cgu.c	2014-12-01 23:23:47.737808576 -0800
@@ -787,5 +787,6 @@
 EXPORT_SYMBOL(cgu_get_pll_freq);
 EXPORT_SYMBOL(cgu_set_subdomain_freq);
 EXPORT_SYMBOL(cgu_hpll_config);
+EXPORT_SYMBOL(cgu_fdiv_config);
 //EXPORT_SYMBOL(cgu_clk_set_exten);
 
diff --exclude CVS --exclude .git -uNr linux-2.6.33/sound/soc/codecs/uda1380.c linux-2.6.33.modified/sound/soc/codecs/uda1380.c
--- linux-2.6.33/sound/soc/codecs/uda1380.c	2014-12-05 15:26:01.758223433 -0800
+++ linux-2.6.33.modified/sound/soc/codecs/uda1380.c	2014-12-05 15:09:01.348079087 -0800
@@ -113,22 +113,22 @@
 	 */
 	if (!codec->active && (reg >= UDA1380_MVOL))
 		return 0;
-	pr_debug("uda1380: hw write %x val %x\n", reg, value);
 	if (codec->hw_write(codec->control_data, data, 3) == 3) {
 		unsigned int val;
 		i2c_master_send(codec->control_data, data, 1);
 		i2c_master_recv(codec->control_data, data, 2);
 		val = (data[0]<<8) | data[1];
-		if (val != value) {
-			pr_debug("uda1380: READ BACK VAL %x\n",
-					(data[0]<<8) | data[1]);
-			return -EIO;
-		}
-		if (reg >= 0x10)
+		if (val == value) {
+		  if (reg >= 0x10)
 			clear_bit(reg - 0x10, &uda1380_cache_dirty);
-		return 0;
-	} else
-		return -EIO;
+	          pr_debug("uda1380:[0x%02x]=0x%x\n", reg, value);
+		  return 0;
+                }
+		pr_debug("uda1380:[0x%02x]!=0x%x=0x%x\n", reg, value, val);
+                return -EIO;
+	}
+	dev_err(codec->dev, "[0x%02x]=0x%x? (hw_write FAILED)\n", reg, value);
+	return -EIO;
 }
 
 #define uda1380_reset(c)	uda1380_write(c, UDA1380_RESET, 0)
@@ -139,8 +139,6 @@
 
 	for_each_bit(bit, &uda1380_cache_dirty, UDA1380_CACHEREGNUM - 0x10) {
 		reg = 0x10 + bit;
-		pr_debug("uda1380: flush reg %x val %x:\n", reg,
-				uda1380_read_reg_cache(uda1380_codec, reg));
 		uda1380_write(uda1380_codec, reg,
 				uda1380_read_reg_cache(uda1380_codec, reg));
 		clear_bit(bit, &uda1380_cache_dirty);
@@ -281,7 +279,6 @@
 	SOC_SINGLE("DAC Polarity inverting Switch", UDA1380_MIXER, 15, 1, 0),	/* DA_POL_INV */
 	SOC_ENUM("Noise Shaper", uda1380_sel_ns_enum),				/* SEL_NS */
 	SOC_ENUM("Digital Mixer Signal Control", uda1380_mix_enum),		/* MIX_POS, MIX */
-	SOC_SINGLE("Silence Switch", UDA1380_MIXER, 7, 1, 0),			/* SILENCE, force DAC output to silence */
 	SOC_SINGLE("Silence Detector Switch", UDA1380_MIXER, 6, 1, 0),		/* SDET_ON */
 	SOC_ENUM("Silence Detector Setting", uda1380_sdet_enum),		/* SD_VALUE */
 	SOC_ENUM("Oversampling Input", uda1380_os_enum),			/* OS */
@@ -559,24 +556,6 @@
 	uda1380_write(codec, UDA1380_CLK, clk);
 }
 
-static int uda1380_mute(struct snd_soc_dai *codec_dai, int mute)
-{
-	struct snd_soc_codec *codec = codec_dai->codec;
-	u16 mute_reg = uda1380_read_reg_cache(codec, UDA1380_DEEMP) & ~R13_MTM;
-
-	/* FIXME: mute(codec,0) is called when the magician clock is already
-	 * set to WSPLL, but for some unknown reason writing to interpolator
-	 * registers works only when clocked by SYSCLK */
-	u16 clk = uda1380_read_reg_cache(codec, UDA1380_CLK);
-	uda1380_write(codec, UDA1380_CLK, ~R00_DAC_CLK & clk);
-	if (mute)
-		uda1380_write(codec, UDA1380_DEEMP, mute_reg | R13_MTM);
-	else
-		uda1380_write(codec, UDA1380_DEEMP, mute_reg);
-	uda1380_write(codec, UDA1380_CLK, clk);
-	return 0;
-}
-
 static int uda1380_set_bias_level(struct snd_soc_codec *codec,
 	enum snd_soc_bias_level level)
 {
@@ -606,7 +585,6 @@
 	.hw_params	= uda1380_pcm_hw_params,
 	.shutdown	= uda1380_pcm_shutdown,
 	.trigger	= uda1380_trigger,
-	.digital_mute = uda1380_mute,
 	.set_fmt	= uda1380_set_dai_fmt_both,
 };
 
@@ -614,7 +592,6 @@
 	.hw_params	= uda1380_pcm_hw_params,
 	.shutdown	= uda1380_pcm_shutdown,
 	.trigger	= uda1380_trigger,
-	.digital_mute = uda1380_mute,
 	.set_fmt	= uda1380_set_dai_fmt_playback,
 };
 
@@ -622,7 +599,6 @@
 	.hw_params	= uda1380_pcm_hw_params,
 	.shutdown	= uda1380_pcm_shutdown,
 	.trigger	= uda1380_trigger,
-	.digital_mute = uda1380_mute,
 	.set_fmt	= uda1380_set_dai_fmt_capture,
 };
 
@@ -716,7 +692,7 @@
 	ret = snd_soc_new_pcms(socdev, SNDRV_DEFAULT_IDX1, SNDRV_DEFAULT_STR1);
 	if (ret < 0) {
 		dev_err(codec->dev, "failed to create pcms: %d\n", ret);
-		goto pcm_err;
+		return ret;
 	}
 
 	/* power on device */
@@ -736,9 +712,6 @@
 	uda1380_add_widgets(codec);
 
 	return ret;
-
-pcm_err:
-	return ret;
 }
 
 /* power down chip */
diff --exclude CVS --exclude .git -uNr linux-2.6.33/sound/soc/lpc313x/Kconfig linux-2.6.33.modified/sound/soc/lpc313x/Kconfig
--- linux-2.6.33/sound/soc/lpc313x/Kconfig	2014-12-05 15:26:01.986219390 -0800
+++ linux-2.6.33.modified/sound/soc/lpc313x/Kconfig	2014-12-01 23:43:44.748946693 -0800
@@ -15,10 +15,10 @@
 	support below.
 
 config SND_LPC313X_SOC_I2S
-        bool
+        tristate
 
 config SND_LPC313X_SOC_I2S_UDA1380
-        bool "SoC Audio for the UDA1380 CODEC using I2S/I2C"
+        tristate "SoC Audio for the UDA1380 CODEC using I2S/I2C"
         depends on SND_LPC313X_SOC
         select I2C_PNX
         select SND_LPC313X_SOC_I2S
@@ -30,7 +30,7 @@
 	  UDA1380 codec.
 
 config SND_LPC315X_SOC_I2S_LPC315X_CODEC
-	bool "SoC Audio for the Analog Die CODEC using I2S/I2C in 315X SoC"
+	tristate "SoC Audio for the Analog Die CODEC using I2S/I2C in 315X SoC"
 	depends on SND_LPC315X_SOC
 	select I2C_PNX
 	select SND_LPC313X_SOC_I2S
diff --exclude CVS --exclude .git -uNr linux-2.6.33/sound/soc/lpc313x/lpc313x-i2s-clocking.c linux-2.6.33.modified/sound/soc/lpc313x/lpc313x-i2s-clocking.c
--- linux-2.6.33/sound/soc/lpc313x/lpc313x-i2s-clocking.c	2014-12-05 15:26:02.150216481 -0800
+++ linux-2.6.33.modified/sound/soc/lpc313x/lpc313x-i2s-clocking.c	2014-12-05 13:53:30.121206465 -0800
@@ -356,6 +356,7 @@
 #endif
 	return ret;
 }
+EXPORT_SYMBOL_GPL(lpc313x_main_clk_rate);
 
 /*
  * Set a specific channel's bit clock and word select rates. his applies
@@ -367,4 +368,5 @@
 	/* Compute and set proper divider */
 	return lpc313x_set_ch_freq(chclk, ws_freq, bit_freq);
 }
-
+EXPORT_SYMBOL_GPL(lpc313x_chan_clk_enable);
+MODULE_LICENSE("GPL");
diff --exclude CVS --exclude .git -uNr linux-2.6.33/sound/soc/soc-core.c linux-2.6.33.modified/sound/soc/soc-core.c
--- linux-2.6.33/sound/soc/soc-core.c	2010-02-24 10:52:17.000000000 -0800
+++ linux-2.6.33.modified/sound/soc/soc-core.c	2014-12-04 21:23:53.420028874 -0800
@@ -1403,16 +1403,12 @@
 int snd_soc_update_bits(struct snd_soc_codec *codec, unsigned short reg,
 				unsigned int mask, unsigned int value)
 {
-	int change;
-	unsigned int old, new;
-
-	old = snd_soc_read(codec, reg);
-	new = (old & ~mask) | value;
-	change = old != new;
-	if (change)
-		snd_soc_write(codec, reg, new);
-
-	return change;
+	unsigned old = snd_soc_read(codec, reg);
+	unsigned changedBits = ((old ^ value) & mask);
+	if (!changedBits)
+          return 0;
+	snd_soc_write(codec, reg, old ^ changedBits);
+        return 1;
 }
 EXPORT_SYMBOL_GPL(snd_soc_update_bits);
 
