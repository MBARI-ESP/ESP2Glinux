diff -ur sysvinit-2.85/src/Makefile sysvinit-2.85.new/src/Makefile
--- sysvinit-2.85/src/Makefile	2001-11-06 03:58:16.000000000 -0800
+++ sysvinit-2.85.new/src/Makefile	2005-03-07 15:56:32.000000000 -0800
@@ -34,8 +34,8 @@
 
 all:		$(PROGS)
 
-init:		init.o init_utmp.o
-		$(CC) $(LDFLAGS) $(STATIC) -o $@ init.o init_utmp.o
+init:		init.o #init_utmp.o
+		$(CC) $(LDFLAGS) $(STATIC) -o $@ init.o #init_utmp.o
 
 halt:		halt.o ifdown.o hddown.o utmp.o reboot.h
 		$(CC) $(LDFLAGS) -o $@ halt.o ifdown.o hddown.o utmp.o
diff -ur sysvinit-2.85/src/init.c sysvinit-2.85.new/src/init.c
--- sysvinit-2.85/src/init.c	2003-04-15 04:16:41.000000000 -0700
+++ sysvinit-2.85.new/src/init.c	2005-03-09 16:56:30.000000000 -0800
@@ -7,8 +7,9 @@
  *
  * Version:	@(#)init.c  2.85  15-Apr-2003  miquels@cistron.nl
  */
-#define VERSION "2.85"
-#define DATE    "15-Apr-2003"
+#define VERSION "2.85-ts1.0l"
+#define DATE    "09-Mar-2005"
+// hacked to remove references to wtmp and utmp -- brent@mbari.org 3/9/05
 /*
  *		This file is part of the sysvinit suite,
  *		Copyright 1991-2003 Miquel van Smoorenburg.
@@ -92,7 +93,7 @@
   "~~",
   "S",
   3,
-  "/sbin/sulogin",
+  "/bin/sh",  /* was /sbin/sulogin */
   NULL,
   NULL
 };
@@ -104,8 +105,8 @@
 sig_atomic_t got_cont = 0;	/* Set if we received the SIGCONT signal */
 sig_atomic_t got_signals;	/* Set if we received a signal. */
 int emerg_shell = 0;		/* Start emergency shell? */
-int wrote_wtmp_reboot = 1;	/* Set when we wrote the reboot record */
-int wrote_utmp_reboot = 1;	/* Set when we wrote the reboot record */
+//int wrote_wtmp_reboot = 1;	/* Set when we wrote the reboot record */
+//int wrote_utmp_reboot = 1;	/* Set when we wrote the reboot record */
 int sltime = 5;			/* Sleep time between TERM and KILL */
 char *argv0;			/* First arguments; show up in ps listing */
 int maxproclen;			/* Maximal length of argv[0] without \0 */
@@ -170,8 +171,8 @@
   { "-TL",	   D_THISLEVEL	},
   { "-PL",	   D_PREVLEVEL	},
   { "-SI",	   D_GOTSIGN	},
-  { "-WR",	   D_WROTE_WTMP_REBOOT},
-  { "-WU",	   D_WROTE_UTMP_REBOOT},
+//  { "-WR",	   D_WROTE_WTMP_REBOOT},
+//  { "-WU",	   D_WROTE_UTMP_REBOOT},
   { "-ST",	   D_SLTIME	},
   { "-DB",	   D_DIDBOOT	},
   { "",	   	   0		}
@@ -220,8 +221,8 @@
 	fprintf(fp, "-TL%c\n", thislevel);
 	fprintf(fp, "-PL%c\n", prevlevel);
 	fprintf(fp, "-SI%u\n", got_signals);
-	fprintf(fp, "-WR%d\n", wrote_wtmp_reboot);
-	fprintf(fp, "-WU%d\n", wrote_utmp_reboot);
+//	fprintf(fp, "-WR%d\n", wrote_wtmp_reboot);
+//	fprintf(fp, "-WU%d\n", wrote_utmp_reboot);
 	fprintf(fp, "-ST%d\n", sltime);
 	fprintf(fp, "-DB%d\n", did_boot);
 
@@ -324,12 +325,12 @@
 			case D_GOTSIGN:
 				fscanf(f, "%u\n", &got_signals);
 				break;
-			case D_WROTE_WTMP_REBOOT:
-				fscanf(f, "%d\n", &wrote_wtmp_reboot);
-				break;
-			case D_WROTE_UTMP_REBOOT:
-				fscanf(f, "%d\n", &wrote_utmp_reboot);
-				break;
+//			case D_WROTE_WTMP_REBOOT:
+//				fscanf(f, "%d\n", &wrote_wtmp_reboot);
+//				break;
+//			case D_WROTE_UTMP_REBOOT:
+//				fscanf(f, "%d\n", &wrote_utmp_reboot);
+//				break;
 			case D_SLTIME:
 				fscanf(f, "%d\n", &sltime);
 				break;
@@ -1026,8 +1027,8 @@
 			 *	old getties - probably it can be taken out.
 			 */
   			if (ch->process[0] != '+')
-				write_utmp_wtmp("", ch->id, ch->pid,
-					INIT_PROCESS, "");
+				//write_utmp_wtmp("", ch->id, ch->pid,
+				//	INIT_PROCESS, "");
   			break;
 	}
 }
@@ -1339,8 +1340,10 @@
 			foundOne = 1;
 			break;
 		case 1: /* Send KILL signal and collect status */
-			if (talk)
+			if (talk) {
 				log(L_CO, "Sending processes the KILL signal");
+                           do_sleep(1);  //otherwise console output is truncated
+                        }
 			kill(-(ch->pid), SIGKILL);
 			break;
 	}
@@ -1387,8 +1390,9 @@
 		    log(L_VB, "Updating utmp for pid %d [id %s]", ch->pid, ch->id);
 #endif
 		    ch->flags &= ~RUNNING;
-		    if (ch->process[0] != '+')
+/*		    if (ch->process[0] != '+')
 		    	write_utmp_wtmp("", ch->id, ch->pid, DEAD_PROCESS, NULL);
+*/
 		}
 	}
 
@@ -1658,7 +1662,7 @@
   }
 
   /* Store both the old and the new runlevel. */
-  write_utmp_wtmp("runlevel", "~~", foo + 256*runlevel, RUN_LVL, "~");
+  //write_utmp_wtmp("runlevel", "~~", foo + 256*runlevel, RUN_LVL, "~");
   thislevel = foo;
   prevlevel = runlevel;
   return(foo);
@@ -1829,8 +1833,10 @@
 		log(L_VB, "Child died, PID= %d", ch->pid);
 #endif
 		ch->flags &= ~(RUNNING|ZOMBIE|WAITING);
+/*
 		if (ch->process[0] != '+')
 			write_utmp_wtmp("", ch->id, ch->pid, DEAD_PROCESS, NULL);
+*/
 	    }
 
 	if ((pid = fork()) > 0) {
@@ -2066,10 +2072,9 @@
 #endif
 
 			/* Write a boot record. */
-			wrote_utmp_reboot = 0;
-			wrote_wtmp_reboot = 0;
-			write_utmp_wtmp("reboot", "~~", 0, BOOT_TIME, "~");
-
+//			wrote_utmp_reboot = 0;
+//			wrote_wtmp_reboot = 0;
+//			write_utmp_wtmp("reboot", "~~", 0, BOOT_TIME, "~");
   			/* Get our run level */
   			newlevel = dfl_level ? dfl_level : get_init_default();
 			if (newlevel == 'S') {
@@ -2119,7 +2124,7 @@
 	}
 	if (loglevel > 0) {
 		log(L_VB, "Entering runlevel: %c", runlevel);
-		write_utmp_wtmp("runlevel", "~~", runlevel + 256 * oldlevel, RUN_LVL, "~");
+//		write_utmp_wtmp("runlevel", "~~", runlevel + 256 * oldlevel, RUN_LVL, "~");
 		thislevel = runlevel;
 		prevlevel = oldlevel;
 		setproctitle("init [%c]", runlevel);
@@ -2200,8 +2205,10 @@
 		log(L_VB, "Child died, PID= %d", ch->pid);
 #endif
 		ch->flags &= ~(RUNNING|ZOMBIE|WAITING);
+/*
 		if (ch->process[0] != '+')
 			write_utmp_wtmp("", ch->id, ch->pid, DEAD_PROCESS, NULL);
+*/
 	    }
 
   }
@@ -2311,7 +2318,6 @@
   console_init();
 
   if (!reload) {
-
   	/* Close whatever files are open, and reset the console. */
 	close(0);
 	close(1);
@@ -2328,7 +2334,7 @@
 	 *	Initialize /var/run/utmp (only works if /var is on
 	 *	root and mounted rw)
 	 */
-  	(void) close(open(UTMP_FILE, O_WRONLY|O_CREAT|O_TRUNC, 0644));
+//	(void) close(open(UTMP_FILE, O_WRONLY|O_CREAT|O_TRUNC, 0644));
 
   	/*
 	 *	Say hello to the world
