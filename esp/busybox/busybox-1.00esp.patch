diff -ru busybox-1.00.original/applets/install.sh busybox-1.00/applets/install.sh
--- busybox-1.00.original/applets/install.sh	2001-03-08 13:42:11.000000000 -0800
+++ busybox-1.00/applets/install.sh	2005-12-02 00:09:35.000000000 -0800
@@ -2,6 +2,7 @@
 
 export LC_ALL=POSIX
 export LC_CTYPE=POSIX
+: ${BUSYBIN:=busybox}
 
 prefix=$1
 if [ "$prefix" = "" ]; then
@@ -16,28 +17,28 @@
 h=`sort busybox.links | uniq`
 
 
-rm -f $prefix/bin/busybox || exit 1
+rm -f $prefix/bin/$BUSYBIN || exit 1
 mkdir -p $prefix/bin || exit 1
-install -m 755 busybox $prefix/bin/busybox || exit 1
+install -m 755 busybox $prefix/bin/$BUSYBIN || exit 1
 
 for i in $h ; do
 	appdir=`dirname $i`
 	mkdir -p $prefix/$appdir || exit 1
 	if [ "$2" = "--hardlinks" ]; then
-	    bb_path="$prefix/bin/busybox"
+	    bb_path="$prefix/bin/$BUSYBIN"
 	else
 	    case "$appdir" in
 		/)
-		    bb_path="bin/busybox"
+		    bb_path="bin/$BUSYBIN"
 		;;
 		/bin)
-		    bb_path="busybox"
+		    bb_path="$BUSYBIN"
 		;;
-		/sbin)
-		    bb_path="../bin/busybox"
+		/*/*)
+		    bb_path="../../bin/$BUSYBIN"
 		;;
-		/usr/bin|/usr/sbin)
-		    bb_path="../../bin/busybox"
+		/*)
+		    bb_path="../bin/$BUSYBIN"
 		;;
 		*)
 		echo "Unknown installation directory: $appdir"
diff -ru busybox-1.00.original/coreutils/Config.in busybox-1.00/coreutils/Config.in
--- busybox-1.00.original/coreutils/Config.in	2004-08-10 19:45:47.000000000 -0700
+++ busybox-1.00/coreutils/Config.in	2005-12-02 00:09:35.000000000 -0800
@@ -329,6 +329,12 @@
 	help
 	  mv is used to move or rename files or directories.
 
+config CONFIG_NOHUP
+	bool "nohup"
+	default n
+	help
+	  run a command immune to hangups, with output to a non-tty.
+
 config CONFIG_OD
 	bool "od"
 	default n
diff -ru busybox-1.00.original/coreutils/Makefile.in busybox-1.00/coreutils/Makefile.in
--- busybox-1.00.original/coreutils/Makefile.in	2004-10-08 00:45:14.000000000 -0700
+++ busybox-1.00/coreutils/Makefile.in	2005-12-02 00:09:35.000000000 -0800
@@ -58,6 +58,7 @@
 COREUTILS-$(CONFIG_MKFIFO)  	+= mkfifo.o
 COREUTILS-$(CONFIG_MKNOD)   	+= mknod.o
 COREUTILS-$(CONFIG_MV)      	+= mv.o
+COREUTILS-$(CONFIG_NOHUP)       += nohup.o
 COREUTILS-$(CONFIG_OD)      	+= od.o
 COREUTILS-$(CONFIG_PRINTF)  	+= printf.o
 COREUTILS-$(CONFIG_PWD)     	+= pwd.o
Only in busybox-1.00/coreutils: nohup.c
diff -ru busybox-1.00.original/editors/Config.in busybox-1.00/editors/Config.in
--- busybox-1.00.original/editors/Config.in	2004-03-15 00:28:31.000000000 -0800
+++ busybox-1.00/editors/Config.in	2005-12-02 00:09:35.000000000 -0800
@@ -108,6 +108,7 @@
 	bool "  Handle window resize"
 	default y
 	depends on CONFIG_VI
+	select CONFIG_FEATURE_AUTOWIDTH
 	help
 	  Make busybox vi behave nicely with terminals that get resized.
 
diff -ru busybox-1.00.original/include/applets.h busybox-1.00/include/applets.h
--- busybox-1.00.original/include/applets.h	2004-08-26 16:01:34.000000000 -0700
+++ busybox-1.00/include/applets.h	2005-12-02 00:09:35.000000000 -0800
@@ -412,6 +412,9 @@
 #ifdef CONFIG_NETSTAT
 	APPLET(netstat, netstat_main, _BB_DIR_BIN, _BB_SUID_NEVER)
 #endif
+#ifdef CONFIG_NOHUP
+	APPLET(nohup, nohup_main, _BB_DIR_USR_BIN, _BB_SUID_NEVER)
+#endif
 #ifdef CONFIG_NSLOOKUP
 	APPLET(nslookup, nslookup_main, _BB_DIR_USR_BIN, _BB_SUID_NEVER)
 #endif
diff -ru busybox-1.00.original/include/usage.h busybox-1.00/include/usage.h
--- busybox-1.00.original/include/usage.h	2004-09-14 09:23:56.000000000 -0700
+++ busybox-1.00/include/usage.h	2005-12-02 00:14:04.000000000 -0800
@@ -1813,6 +1813,13 @@
 	"\t-w raw sockets\n" \
 	"\t-x unix sockets"
 
+#define nohup_trivial_usage \
+	"COMMAND [ARGS]"
+#define nohup_full_usage \
+	"run a command immune to hangups, with output to a non-tty"
+#define nohup_example_usage \
+	"$ nohup make &"
+
 #define nslookup_trivial_usage \
 	"[HOST] [SERVER]"
 #define nslookup_full_usage \
@@ -2331,6 +2338,7 @@
 	"\t-n\t\tRun as a foreground process\n" \
 	"\t-O FILE\t\tUse an alternate log file (default=/var/log/messages)\n" \
 	"\t-S\t\tMake logging output smaller." \
+	"\t-l n\tLocally log only messages of at least the given priority.\n"\
 	USAGE_ROTATE_LOGFILE( \
 	"\n\t-s SIZE\t\tMax size (KB) before rotate (default=200KB, 0=off)\n" \
 	"\t-b NUM\t\tNumber of rotated logs to keep (default=1, max=99, 0=purge)") \
@@ -2610,17 +2618,18 @@
 	"/dev/tty2\n"
 
 #define udhcpc_trivial_usage \
-	"[-fbnqv] [-c CLIENTID] [-H HOSTNAME] [-i INTERFACE]\n[-p pidfile] [-r IP] [-s script]"
+	"[-fbnqv] [-c CLIENTID] [-H HOSTNAME] [-i INTERFACE]\n[-p pidfile] [-r IP] [-s script] [-m duration]"
 #define udhcpc_full_usage \
 	"\t-c,\t--clientid=CLIENTID\tClient identifier\n" \
 	"\t-H,\t--hostname=HOSTNAME\tClient hostname\n" \
-	"\t-h,\t                   \tAlias for -H\n" \
+	"\t-i,\t--interface=INTERFACE\tInterface to use (default: eth0)\n" \
+	"\t-m,\t--maxlease=seconds\tLongest lease to accept (accelerates probes)\n" \
+	"\t-h,\t\t\tAlias for -H\n" \
 	"\t-f,\t--foreground\tDo not fork after getting lease\n" \
 	"\t-b,\t--background\tFork to background if lease cannot be immediately negotiated.\n" \
-	"\t-i,\t--interface=INTERFACE\tInterface to use (default: eth0)\n" \
-	"\t-n,\t--now\tExit with failure if lease cannot be immediately negotiated.\n" \
+	"\t-n,\t--now\t\tExit with failure if lease cannot be immediately negotiated.\n" \
 	"\t-p,\t--pidfile=file\tStore process ID of daemon in file\n" \
-	"\t-q,\t--quit\tQuit after obtaining lease\n" \
+	"\t-q,\t--quit\t\tQuit after obtaining lease\n" \
 	"\t-r,\t--request=IP\tIP address to request (default: none)\n" \
 	"\t-s,\t--script=file\tRun file at dhcp events (default: /usr/share/udhcpc/default.script)\n" \
 	"\t-v,\t--version\tDisplay version"
diff -ru busybox-1.00.original/init/init.c busybox-1.00/init/init.c
--- busybox-1.00.original/init/init.c	2004-10-08 01:21:54.000000000 -0700
+++ busybox-1.00/init/init.c	2005-12-02 00:09:35.000000000 -0800
@@ -674,8 +674,13 @@
 	/* We have to fork here, since the kernel calls do_exit(0) in
 	 * linux/kernel/sys.c, which can cause the machine to panic when
 	 * the init process is killed.... */
+ message (CONSOLE, "Forking for Reboot...");       
 	if ((pid = fork()) == 0) {
+ message (CONSOLE, "calling kernel reboot(%lx)...", magic);
+ sleep(1);     
 		reboot(magic);
+ message (CONSOLE, "reboot returned.");
+ sleep(1);
 		_exit(0);
 	}
 	waitpid (pid, NULL, 0);
@@ -683,6 +688,11 @@
 
 static void shutdown_system(void)
 {
+        static const int toblock[] = {
+	  SIGHUP, SIGCHLD, SIGUSR1, SIGUSR2, SIGINT, SIGTERM, SIGCONT,
+          SIGSTOP, SIGTSTP};
+        int i;
+                    
 	sigset_t block_signals;
 
 	/* run everything to be run at "shutdown".  This is done _prior_
@@ -692,15 +702,9 @@
 
 	/* first disable all our signals */
 	sigemptyset(&block_signals);
-	sigaddset(&block_signals, SIGHUP);
-	sigaddset(&block_signals, SIGCHLD);
-	sigaddset(&block_signals, SIGUSR1);
-	sigaddset(&block_signals, SIGUSR2);
-	sigaddset(&block_signals, SIGINT);
-	sigaddset(&block_signals, SIGTERM);
-	sigaddset(&block_signals, SIGCONT);
-	sigaddset(&block_signals, SIGSTOP);
-	sigaddset(&block_signals, SIGTSTP);
+        
+        for (i=0; i<sizeof(toblock)/sizeof(int); i++)
+          sigaddset(&block_signals, toblock[i]);
 	sigprocmask(SIG_BLOCK, &block_signals, NULL);
 
 	/* Allow Ctrl-Alt-Del to reboot system. */
@@ -718,7 +722,6 @@
 	message(CONSOLE | LOG, "Sending SIGKILL to all processes.");
 	kill(-1, SIGKILL);
 	sleep(1);
-
 	sync();
 }
 
diff -ru busybox-1.00.original/libbb/find_mount_point.c busybox-1.00/libbb/find_mount_point.c
--- busybox-1.00.original/libbb/find_mount_point.c	2004-03-15 00:28:42.000000000 -0800
+++ busybox-1.00/libbb/find_mount_point.c	2005-12-02 00:09:35.000000000 -0800
@@ -52,6 +52,7 @@
 		return 0;
 
 	while ((mountEntry = getmntent(mountTable)) != 0) {
+        	if (strcmp(mountEntry->mnt_type, "rootfs") == 0) continue;
 		if (strcmp(name, mountEntry->mnt_dir) == 0
 			|| strcmp(name, mountEntry->mnt_fsname) == 0)	/* String match. */
 			break;
diff -ru busybox-1.00.original/loginutils/Config.in busybox-1.00/loginutils/Config.in
--- busybox-1.00.original/loginutils/Config.in	2004-08-26 16:12:59.000000000 -0700
+++ busybox-1.00/loginutils/Config.in	2005-12-02 00:09:35.000000000 -0800
@@ -69,7 +69,7 @@
 config CONFIG_LOGIN
 	bool "login"
 	default n
-	select CONFIG_FEATURE_SUID
+#	select CONFIG_FEATURE_SUID
 	help
 	  login is used when signing onto a system.
 
@@ -88,7 +88,7 @@
 config CONFIG_PASSWD
 	bool "passwd"
 	default n
-	select CONFIG_FEATURE_SUID
+#	select CONFIG_FEATURE_SUID
 	help
 	  passwd changes passwords for user and group accounts.  A normal user
 	  may only change the password for his/her own account, the super user
@@ -101,7 +101,7 @@
 config CONFIG_SU
 	bool "su"
 	default n
-	select CONFIG_FEATURE_SUID
+#	select CONFIG_FEATURE_SUID
 	help
 	  su is used to become another user during a login session.
 	  Invoked without a username, su defaults to becoming the super user.
@@ -119,20 +119,20 @@
 config CONFIG_VLOCK
 	bool "vlock"
 	default n
-	select CONFIG_FEATURE_SUID
+#	select CONFIG_FEATURE_SUID
 	help
 	  Build the "vlock" applet which allows you to lock (virtual) terminals.
 
 	  Note that Busybox binary must be setuid root for this applet to
 	  work properly.
 
-comment "Common options for adduser, deluser, login, su"
-	depends on CONFIG_ADDUSER || CONFIG_DELUSER || CONFIG_LOGIN || CONFIG_SU
+comment "Common options for adduser, deluser, login, su & passwd"
+	depends on CONFIG_ADDUSER || CONFIG_DELUSER || CONFIG_LOGIN || CONFIG_SU || CONFIG_PASSWD
 
 config CONFIG_FEATURE_SHADOWPASSWDS
 	bool "Support for shadow passwords"
 	default n
-	depends on CONFIG_ADDUSER || CONFIG_DELUSER || CONFIG_LOGIN || CONFIG_SU
+	depends on CONFIG_ADDUSER || CONFIG_DELUSER || CONFIG_LOGIN || CONFIG_SU || CONFIG_PASSWD
 	help
 	  Build support for shadow password in /etc/shadow.  This file is only
 	  readable by root and thus the encrypted passwords are no longer
diff -ru busybox-1.00.original/networking/Config.in busybox-1.00/networking/Config.in
--- busybox-1.00.original/networking/Config.in	2004-09-23 13:08:46.000000000 -0700
+++ busybox-1.00/networking/Config.in	2005-12-02 00:09:35.000000000 -0800
@@ -492,7 +492,7 @@
 config CONFIG_TELNETD
 	bool "telnetd"
 	default n
-	select CONFIG_LOGIN
+#	select CONFIG_LOGIN
 	help
 	  A daemon for the TELNET protocol, allowing you to log onto the host
 	  running the daemon.  Please keep in mind that the TELNET protocol
diff -ru busybox-1.00.original/networking/udhcp/Makefile.in busybox-1.00/networking/udhcp/Makefile.in
--- busybox-1.00.original/networking/udhcp/Makefile.in	2004-10-08 01:49:26.000000000 -0700
+++ busybox-1.00/networking/udhcp/Makefile.in	2005-12-02 00:09:35.000000000 -0800
@@ -47,7 +47,7 @@
 libraries-y+=$(UDHCP_DIR)$(UDHCP_AR)
 
 $(UDHCP_DIR)$(UDHCP_AR): $(UDHCP_OBJS)
-	$(AR) -ro $@ $(UDHCP_OBJS)
+	$(AR) $(ARFLAGS) $@ $(UDHCP_OBJS)
 
 $(UDHCP_OBJS): $(UDHCP_DIR)%.o : $(srcdir)/%.c
 	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -DIN_BUSYBOX -c $< -o $@
diff -ru busybox-1.00.original/networking/udhcp/dhcpc.c busybox-1.00/networking/udhcp/dhcpc.c
--- busybox-1.00.original/networking/udhcp/dhcpc.c	2004-05-19 01:29:05.000000000 -0700
+++ busybox-1.00/networking/udhcp/dhcpc.c	2005-12-02 00:09:35.000000000 -0800
@@ -68,6 +68,7 @@
 	clientid: NULL,
 	hostname: NULL,
 	ifindex: 0,
+        maxLease: 0,
 	arp: "\0\0\0\0\0\0",		/* appease gcc-3.0 */
 };
 
@@ -78,6 +79,7 @@
 "Usage: udhcpc [OPTIONS]\n\n"
 "  -c, --clientid=CLIENTID         Client identifier\n"
 "  -H, --hostname=HOSTNAME         Client hostname\n"
+"  -m, --maxlease=seconds          Longest lease time accepted\n"
 "  -h                              Alias for -H\n"
 "  -f, --foreground                Do not fork after getting lease\n"
 "  -b, --background                Fork to background if lease cannot be\n"
@@ -204,6 +206,7 @@
 		{"quit",	no_argument,		0, 'q'},
 		{"request",	required_argument,	0, 'r'},
 		{"script",	required_argument,	0, 's'},
+                {"maxlease",    required_argument,      0, 'm'},
 		{"version",	no_argument,		0, 'v'},
 		{0, 0, 0, 0}
 	};
@@ -211,7 +214,7 @@
 	/* get options */
 	while (1) {
 		int option_index = 0;
-		c = getopt_long(argc, argv, "c:fbH:h:i:np:qr:s:v", arg_options, &option_index);
+		c = getopt_long(argc, argv, "c:fbH:h:i:np:qr:s:m:v", arg_options, &option_index);
 		if (c == -1) break;
 
 		switch (c) {
@@ -257,6 +260,9 @@
 		case 's':
 			client_config.script = optarg;
 			break;
+                case 'm':
+                        client_config.maxLease=strtoul(optarg, NULL, 0);
+                        break;
 		case 'v':
 			printf("udhcpcd, version %s\n\n", VERSION);
 			return 0;
@@ -374,7 +380,7 @@
 					/* send a request packet */
 					send_renew(xid, server_addr, requested_ip); /* unicast */
 
-					t1 = (t2 - t1) / 2 + t1;
+					t1 += (t2 - t1) / 2;
 					timeout = t1 + start;
 				}
 				break;
@@ -392,7 +398,7 @@
 					/* send a request packet */
 					send_renew(xid, 0, requested_ip); /* broadcast */
 
-					t2 = (lease - t2) / 2 + t2;
+					t2 += (lease - t2) / 2;
 					timeout = t2 + start;
 				}
 				break;
@@ -419,6 +425,11 @@
 					(unsigned long) packet.xid, xid);
 				continue;
 			}
+			/* Ignore packets that aren't for us */
+			if (memcmp(packet.chaddr, client_config.arp, 6)) {
+				DEBUG(LOG_INFO, "packet does not have our chaddr -- ignoring");
+				continue;
+			}
 
 			if ((message = get_option(&packet, DHCP_MESSAGE_TYPE)) == NULL) {
 				DEBUG(LOG_ERR, "couldnt get option from packet -- ignoring");
@@ -455,6 +466,8 @@
 						memcpy(&lease, temp, 4);
 						lease = ntohl(lease);
 					}
+                                        if (lease >= client_config.maxLease-1)  //to accelerate network probes
+                                          lease = client_config.maxLease;
 
 					/* enter bound state */
 					t1 = lease / 2;
diff -ru busybox-1.00.original/networking/udhcp/dhcpc.h busybox-1.00/networking/udhcp/dhcpc.h
--- busybox-1.00.original/networking/udhcp/dhcpc.h	2004-01-30 15:45:12.000000000 -0800
+++ busybox-1.00/networking/udhcp/dhcpc.h	2005-12-02 00:09:35.000000000 -0800
@@ -28,6 +28,7 @@
 	uint8_t *clientid;		/* Optional client id to use */
 	uint8_t *hostname;		/* Optional hostname to use */
 	int ifindex;			/* Index number of the interface to use */
+        unsigned long maxLease;         /* reduce any offered lease duration */
 	uint8_t arp[6];			/* Our arp address */
 };
 
diff -ru busybox-1.00.original/networking/udhcp/socket.c busybox-1.00/networking/udhcp/socket.c
--- busybox-1.00.original/networking/udhcp/socket.c	2004-03-15 00:29:01.000000000 -0800
+++ busybox-1.00/networking/udhcp/socket.c	2005-12-02 00:09:35.000000000 -0800
@@ -116,8 +116,15 @@
 		close(fd);
 		return -1;
 	}
+        
+//	strncpy(interface.ifr_ifrn.ifrn_name, inf, IFNAMSIZ);
+{
+  char *dst = interface.ifr_ifrn.ifrn_name;
+  int len = IFNAMSIZ;
+  while (len-- && *inf && *inf != ':') *dst++=*inf++;
+  while (len--) *dst++ = 0;
+}
 
-	strncpy(interface.ifr_ifrn.ifrn_name, inf, IFNAMSIZ);
 	if (setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE,(char *)&interface, sizeof(interface)) < 0) {
 		close(fd);
 		return -1;
diff -ru busybox-1.00.original/sysklogd/syslogd.c busybox-1.00/sysklogd/syslogd.c
--- busybox-1.00.original/sysklogd/syslogd.c	2004-09-14 11:12:13.000000000 -0700
+++ busybox-1.00/sysklogd/syslogd.c	2005-12-02 00:09:35.000000000 -0800
@@ -71,6 +71,9 @@
 /* interval between marks in seconds */
 static int MarkInterval = 20 * 60;
 
+/* level of messages to be locally logged */
+static int logLevel = 7;
+
 /* localhost's name */
 static char LocalHostName[64];
 
@@ -152,7 +155,7 @@
 
 void ipcsyslog_cleanup(void)
 {
-	printf("Exiting Syslogd!\n");
+//	printf("Exiting Syslogd!\n");
 	if (shmid != -1) {
 		shmdt(buf);
 	}
@@ -458,7 +461,7 @@
 
 	if (local_logging == TRUE)
 #endif
-	{
+	if (LOG_PRI(pri) <= logLevel) {
 		/* now spew out the message to wherever it is supposed to go */
 		if (small)
 			message("%s %s\n", timestamp, msg);
@@ -623,7 +626,7 @@
 	char *p;
 
 	/* do normal option parsing */
-	while ((opt = getopt(argc, argv, "m:nO:s:Sb:R:LC::")) > 0) {
+	while ((opt = getopt(argc, argv, "m:nO:l:s:Sb:R:LC::")) > 0) {
 		switch (opt) {
 		case 'm':
 			MarkInterval = atoi(optarg) * 60;
@@ -634,6 +637,13 @@
 		case 'O':
 			logFilePath = optarg;
 			break;
+                case 'l':
+                        logLevel = atoi(optarg);
+                        /* Valid levels are between 0 and 7 */
+                        if ((unsigned)logLevel > 7) {
+                                bb_show_usage();
+                        }
+                        break;
 #ifdef CONFIG_FEATURE_ROTATE_LOGFILE
 		case 's':
 			logFileSize = atoi(optarg) * 1024;
diff -ruP busybox-1.00/coreutils/nohup.c busybox-1.00.new/coreutils/nohup.c
--- busybox-1.00/coreutils/nohup.c	1969-12-31 16:00:00.000000000 -0800
+++ busybox-1.00.new/coreutils/nohup.c	2005-10-25 22:04:34.000000000 -0700
@@ -0,0 +1,198 @@
+/* vi: set sw=4 ts=4: */
+/* nohup -- run a command immune to hangups, with output to a non-tty
+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software Foundation,
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
+
+/* Written by Jim Meyering  */
+/* initial busybox port by Bernhard Fischer */
+
+#include <stdio_ext.h> /* __fpending */
+#include <stdio.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/types.h>
+#include <signal.h>
+#include <errno.h>
+
+#include "busybox.h"
+#define EXIT_CANNOT_INVOKE (126)
+#define NOHUP_FAILURE (127)
+#define EXIT_ENOENT NOHUP_FAILURE
+
+
+
+#if defined F_GETFD && defined F_SETFD
+static inline int set_cloexec_flag (int desc)
+{
+	int flags = fcntl (desc, F_GETFD, 0);
+	if (0 <= flags) {
+		if (flags == (flags |= FD_CLOEXEC) ||
+			fcntl (desc, F_SETFD, flags) != -1) {
+			return 0;
+		}
+	}
+	return -1;
+}
+#else
+#define set_cloexec_flag(desc) (0)
+#endif
+
+static int fd_reopen (int desired_fd, char const *file, int flags, mode_t mode)
+{
+	int fd;
+
+	close (desired_fd);
+	fd = open (file, flags, mode);
+	if (fd == desired_fd || fd < 0)
+		return fd;
+	else {
+		int fd2 = fcntl (fd, F_DUPFD, desired_fd);
+		int saved_errno = errno;
+		close (fd);
+		errno = saved_errno;
+		return fd2;
+	}
+}
+
+
+/* Close standard output, exiting with status 'exit_failure' on failure.
+   If a program writes *anything* to stdout, that program should close
+   stdout and make sure that it succeeds before exiting.  Otherwise,
+   suppose that you go to the extreme of checking the return status
+   of every function that does an explicit write to stdout.  The last
+   printf can succeed in writing to the internal stream buffer, and yet
+   the fclose(stdout) could still fail (due e.g., to a disk full error)
+   when it tries to write out that buffered data.  Thus, you would be
+   left with an incomplete output file and the offending program would
+   exit successfully.  Even calling fflush is not always sufficient,
+   since some file systems (NFS and CODA) buffer written/flushed data
+   until an actual close call.
+
+   Besides, it's wasteful to check the return value from every call
+   that writes to stdout -- just let the internal stream state record
+   the failure.  That's what the ferror test is checking below.
+
+   It's important to detect such failures and exit nonzero because many
+   tools (most notably `make' and other build-management systems) depend
+   on being able to detect failure in other tools via their exit status.  */
+
+static void close_stdout (void)
+{
+	int prev_fail = ferror (stdout);
+	int none_pending = (0 == __fpending (stdout));
+	int fclose_fail = fclose (stdout);
+
+	if (prev_fail || fclose_fail) {
+		/* If ferror returned zero, no data remains to be flushed, and we'd
+		otherwise fail with EBADF due to a failed fclose, then assume that
+		it's ok to ignore the fclose failure.  That can happen when a
+		program like cp is invoked like this `cp a b >&-' (i.e., with
+		stdout closed) and doesn't generate any output (hence no previous
+		error and nothing to be flushed).  */
+		if ((fclose_fail ? errno : 0) == EBADF && !prev_fail && none_pending)
+			return;
+
+		bb_perror_msg_and_die(bb_msg_write_error);
+	}
+}
+
+
+int nohup_main (int argc, char **argv)
+{
+	int saved_stderr_fd;
+
+	if (argc < 2)
+		bb_show_usage();
+
+	bb_default_error_retval = NOHUP_FAILURE;
+
+	atexit (close_stdout);
+
+	/* If standard input is a tty, replace it with /dev/null.
+	 Note that it is deliberately opened for *writing*,
+	 to ensure any read evokes an error.  */
+	if (isatty (STDIN_FILENO))
+		fd_reopen (STDIN_FILENO, "/dev/null", O_WRONLY, 0);
+
+	/* If standard output is a tty, redirect it (appending) to a file.
+	 First try nohup.out, then $HOME/nohup.out.  */
+	if (isatty (STDOUT_FILENO)) {
+		char *in_home = NULL;
+		char const *file = "nohup.out";
+		int fd = fd_reopen (STDOUT_FILENO, file,
+				O_CREAT | O_WRONLY | O_APPEND, S_IRUSR | S_IWUSR);
+
+		if (fd < 0) {
+			if ((in_home = getenv ("HOME")) != NULL) {
+				in_home = concat_path_file(in_home, file);
+				fd = fd_reopen (STDOUT_FILENO, in_home,
+						O_CREAT | O_WRONLY | O_APPEND, S_IRUSR | S_IWUSR);
+			}
+			if (fd < 0) {
+				bb_perror_msg("failed to open '%s'", file);
+				if (in_home)
+					bb_perror_msg("failed to open '%s'",in_home);
+				exit (NOHUP_FAILURE);
+			}
+			file = in_home;
+		}
+
+		umask (~(S_IRUSR | S_IWUSR));
+		bb_error_msg("appending output to '%s'", file);
+//		if (ENABLE_FEATURE_CLEAN_UP)
+			free (in_home);
+	}
+
+	/* If standard error is a tty, redirect it to stdout.  */
+	if (isatty (STDERR_FILENO)) {
+	/* Save a copy of stderr before redirecting, so we can use the original
+	 if execve fails.  It's no big deal if this dup fails.  It might
+	 not change anything, and at worst, it'll lead to suppression of
+	 the post-failed-execve diagnostic.  */
+		saved_stderr_fd = dup (STDERR_FILENO);
+
+		if (0 <= saved_stderr_fd && set_cloexec_flag (saved_stderr_fd) == -1)
+			bb_perror_msg_and_die("failed to set the copy"
+					"of stderr to close on exec");
+
+		if (dup2 (STDOUT_FILENO, STDERR_FILENO) < 0) {
+			if (errno != EBADF)
+				bb_perror_msg_and_die("failed to redirect standard error");
+			close (STDERR_FILENO);
+		}
+	} else
+		saved_stderr_fd = STDERR_FILENO;
+
+	signal (SIGHUP, SIG_IGN);
+
+	{
+	char **cmd = argv + 1;
+
+	execvp (*cmd, cmd);
+
+	/* The execve failed.  Output a diagnostic to stderr only if:
+	   - stderr was initially redirected to a non-tty, or
+	   - stderr was initially directed to a tty, and we
+	   can dup2 it to point back to that same tty.
+	   In other words, output the diagnostic if possible, but only if
+	   it will go to the original stderr.  */
+	if (dup2 (saved_stderr_fd, STDERR_FILENO) == STDERR_FILENO)
+		bb_perror_msg("cannot run command '%s'",*cmd);
+
+	return (errno == ENOENT ? EXIT_ENOENT : EXIT_CANNOT_INVOKE);
+	}
+}
+
diff -ru busybox-1.00/editors/vi.c busybox-1.00.new/editors/vi.c
--- busybox-1.00/editors/vi.c	2004-08-19 12:15:06.000000000 -0700
+++ busybox-1.00.new/editors/vi.c	2006-01-23 14:40:57.000000000 -0800
@@ -19,7 +19,7 @@
  */
 
 static const char vi_Version[] =
-	"$Id$";
+       "$Id$";
 
 /*
  * To compile for standalone use:
@@ -285,6 +285,7 @@
 static int mycmp(Byte *, Byte *, int);	// string cmp based in "ignorecase"
 #endif							/* CONFIG_FEATURE_VI_SEARCH */
 #ifdef CONFIG_FEATURE_VI_COLON
+static char *initialCmd = NULL;   //remember arg of -c on cmd line if specified
 static void Hit_Return(void);
 static Byte *get_one_address(Byte *, int *);	// get colon addr, if present
 static Byte *get_address(Byte *, int *, int *);	// get two colon addrs, if present
@@ -365,8 +366,14 @@
 	//  1-  process $HOME/.exrc file
 	//  2-  process EXINIT variable from environment
 	//  3-  process command line args
-	while ((c = getopt(argc, argv, "hCR")) != -1) {
+	while ((c = getopt(argc, argv, "c:hCR")) != -1) {
 		switch (c) {
+#ifdef CONFIG_FEATURE_VI_COLON
+                case 'c':       // execute command first
+                        free (initialCmd);  //ignore any previous -c args
+                        initialCmd = strdup (optarg);
+                        break;
+#endif
 #ifdef CONFIG_FEATURE_VI_CRASHME
 		case 'C':
 			crashme = 1;
@@ -380,7 +387,6 @@
 #endif							/* CONFIG_FEATURE_VI_READONLY */
 			//case 'r':	// recover flag-  ignore- we don't use tmp file
 			//case 'x':	// encryption flag- ignore
-			//case 'c':	// execute command first
 			//case 'h':	// help -- just use default
 		default:
 			show_help();
@@ -505,6 +511,9 @@
 	ioq = ioq_start = last_modifying_cmd = 0;
 	adding2q = 0;
 #endif							/* CONFIG_FEATURE_VI_DOT_CMD */
+#ifdef CONFIG_FEATURE_VI_COLON
+        if (initialCmd) colon(initialCmd);  //run initial command just before main loop
+#endif
 	redraw(FALSE);			// dont force every col re-draw
 	show_status_line();
 
@@ -1937,7 +1946,10 @@
 #endif							/* CONFIG_FEATURE_VI_READONLY */
 #ifdef CONFIG_FEATURE_VI_SET
 	"\n\tSome colon mode commands with \':\'"
-#endif							/* CONFIG_FEATURE_VI_SET */
+#ifdef CONFIG_FEATURE_VI_COLON
+	"\n\t & after -c cmd line arg"
+#endif
+#endif                                                  /* CONFIG_FEATURE_VI_SET */
 #ifdef CONFIG_FEATURE_VI_SETOPTS
 	"\n\tSettable options with \":set\""
 #endif							/* CONFIG_FEATURE_VI_SETOPTS */
