Notes on how to configure the TS-7200 from Technologics as an ESP controller'
 -- revised:  9/8/11 brent@mbari.org

0) delete or save any existing ~/armHost rootfs directory

** Note:
     Steps A - F are now automated by running the script:
        $  buildAll

A) Build the Flash Filesystem if its not up to date

$ cd ~/linux/esp
$ arminstall  #this builds the filesystem tree rooted at ~/armHost


B) Add Ruby and its supporting libs to the base tree

$ cd ~/ESP/gen2/software
$ cd termcap
$ arminstall
$ cd ../readline
$ armconfig && arminstall
$ cd ../ruby
$ armconfig && arminstall


C) Add Tiff libraries and snap application

$ cd ~/ESP/gen2/software/libtiff
$ armconfig && arminstall

$ cd ../camera/starlight
$ make clean arm/snap
$ /arm/bin/strip arm/snap
$ mkdir -p ~/armHost/usr/local/bin
$ cp arm/snap ~/armHost/usr/local/bin


D) Add picocom and lrzsz

$ cd ~/linux/picocom
$ make CC=/arm/bin/gcc clean picocom
$ /arm/bin/strip picocom
$ cp picocom ~/armHost/usr/local/bin

$ cd ~/linux/lrzsz
$ armconfig && arminstall


E) Build the kernel

Build the kernel from source if necessary (see note below)
$ cd ~/linux/technologic
$ armconfig  #see comments in armconfig for downloading the latest
$ cd linux24
$ make dep clean bzImage modules modules_install

Note that if the kernel is already up to date, you may
save time by just installing the kernel modules:

$ cd ~/linux/technologic/linux24
$ make modules_install


F) Create the JFFS2 filesystem image

$ cd ../../esp
$ buildjffs2 > armHost.jffs2


G) Configure Redboot

Automatic method:
Bring up picocom

$ picocom --baud=115200 /dev/ttyS0  #or ttyS1
# reset board, press control-C to stay in Redboot

redboot>  #<cntrl-A><cntrl-S>  to sent ASCII file
file:  ts7200.cfg  #in this directory

Manual Method:
Bring up picocom
Reset the board and press Control-C to enter redboot
redboot> fconfig  #to configure
follow example redboot.cfg
[Bufflehead is assumed to be the development server]
define aliases
alias name "string"  #remember to \escape all \" in strings

cut and paste the following into redboot> one line at a time:

alias console "ttyAM1,115200"
n
alias root "/dev/mtdblock1 ro"
n
alias kernel "fis load vmlinux"
n
alias exec "exec -c \"console=%{console} root=%{root}\""
n
alias boot "%{kernel}; %{exec}"
n
alias nfsroot "134.89.10.91:/nfsroot/ts7200"
n
alias nfsexec "exec -c \"console=%{console} ip=%{ip} root=/dev/nfs nfsroot=%{nfsroot}\""
n
alias ip "dhcp"
n
alias nfsboot "%{kernel}; %{nfsexec}"
n
alias getKernel "load -r -b 0x218000"
n
alias bootcf "%{kernel}; exec -c \"console=%{console} root=/dev/hda1\""
y


H) Install JP 4 to use COM2 as the console port
   (move the serial connection to COM2)
   reset the board and press Control-C to enter redboot
   

I) Replace the kernel with the one last built

RedBoot>  %{getKernel} ts7200-mbari4
RedBoot>  fis delete vmlinux
RedBoot>  fis create vmlinux


J) Install the staging Compact Flash and boot the board

power off board, install CF card, power on
control-C to enter redboot
RedBoot> %{bootcf}
on ESPstage as root:
# flash_eraseall -j /dev/mtd/1

on bufflehead:
$ cat armHost.jffs2 | ssh root@ESPstage dd of=/dev/mtd/1 bs=128k


-- or --

J) Boot from NFS root (on bufflehead)

On bufflehead:
# cp ~/linux/esp/armHost.jff2 /nfsroot/ts7200/flash

RedBoot> %{nfsboot}
# 
#  flash_eraseall -j /dev/mtd/1  #BEWARE:  other mtd partitions will BRICK board!
# dd of=/dev/mtd/1 bs=128k < /flash/armHost.jffs2
# sync; sync


K) reboot and let the board start normally after disconnecting network

  login as root, RNAprobe


L) Change the /etc/HOSTNAME

# echo ESPname > /etc/HOSTNAME

    and use vi to change corresponding entry for /var/log in /etc/fstab, then
# reboot

M) If flash is new format it:

  # sfdisk -N1 /dev/hda
  ,,L,*
  
  # mke2fs -j -L`hostname` /dev/hda1

  # reboot
  
N) create a .SWAP file on the compact flash

  # dd if=/dev/zero bs=1M count=100 >/cf/.SWAP
  # mkswap /cf/.SWAP
  

O) generate .ssh keys for users

  for each user, login
  mkdir .ssh && cd .ssh &&
  dropbearkey -t rsa -f id_rsa > id_rsa.pub
  scp user@bufflehead:.ssh/id_rsa.pub authorized_keys  #option to add the first


  
?)  What did I forget?!
  Oh, copy the esp application to the esp user's esp2local directory
  
