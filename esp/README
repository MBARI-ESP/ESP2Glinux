Notes on how to configure the TS-7200 from Technologics as an ESP controller'
 -- revised:  5/30/13 brent@mbari.org

These instructions are intended to be run on an ESP Linux laptop.
It assumes the following services and tools are already installed:

  NFS server
  TFTP server
  GNU 'C' compiler targeting the ESP's ARM based host
  CVS source control client providing read-only access to MBARI's ESP tree.


0) delete or save any existing ~/armHost rootfs directory

1) If you have not already done so, build the Linux kernel for the ESP:

$ cd ~/linux/technologic
$ armconfig  #see comments in armconfig for downloading the latest
$ cd linux24
$ make dep clean bzImage modules

2) copy updated kernel image to the root of /tftp server:

$ sudo cp linux24/arch/arm/boot/zImage  /tftp/ts7200-mbari5

Note that the kernel does not change often.
Rebuilding it is time consuming, so it is not part of the buildAll script.

** Note:
     Steps A - F are now automated by running the script:
        $  buildAll

A) Build the Flash Filesystem if its not up to date

$  cd ~/linux/esp
$  buildAll  #this takes about 15 minutes to complete


B) Configure Redboot

You must customize the IP addresses below for your networking environment.
Configuring Redboot necessary only if the bootloader has never been configured
or your networking IP addresses change.

Automatic method:
Edit ts7200.cfg to customize it for your network environment.

Bring up picocom

$ picocom --baud=115200 /dev/XXX  #XXX depends on your serial device
# the 1st USB serial dongle inserted is typically /dev/ttyUSB0
# reset board, press control-C to stay in Redboot

redboot>  #<cntrl-A><cntrl-S>  to send ASCII file
file:  ts7200.cfg  #in this directory

Manual Method:
Bring up picocom as above
Reset the board and press Control-C to enter redboot
redboot> fconfig  #to configure
follow example redboot.cfg
define aliases
alias name "string"  #remember to \escape all \" in strings

cut and paste the following into redboot> one line at a time:

alias console "ttyAM1,115200"
n
alias root "/dev/mtdblock1 ro"
n
alias kernel "fis load vmlinux"
n
alias exec "exec -c \"console=%{console} root=%{root}\""
n
alias boot "%{kernel}; %{exec}"
n
alias nfsroot "IP.of.your.ESP_Linux_laptop:/nfsroot/ts7200"
n
alias nfsexec "exec -c \"console=%{console} ip=%{ip} root=/dev/nfs nfsroot=%{nfsroot}\""
n
alias ip "dhcp"
n
alias nfsboot "%{kernel}; %{nfsexec}"
n
alias getKernel "load -r -b 0x218000"
n
alias bootcf "%{kernel}; exec -c \"console=%{console} root=/dev/hda1\""
y


C) Replace the kernel with the one last built

RedBoot>  %{getKernel} ts7200-mbari5
RedBoot>  fis delete vmlinux
RedBoot>  fis create vmlinux


J) Boot from NFS root (served by your Linux laptop)

On bufflehead:
# cp ~/linux/esp/armHost.jff2 /nfsroot/ts7200/flash

RedBoot> %{nfsboot}
# 
#  flash_eraseall -j /dev/mtd/1  #BEWARE:  other mtd partitions will BRICK board!
# dd of=/dev/mtd/1 bs=128k < /flash/armHost.jffs2
# sync; sync
# /sbin/crash/reboot


K) reboot and let the board start normally after disconnecting network

  login as root, RNAprobe


L) Change the /etc/HOSTNAME

# echo ESPname > /etc/HOSTNAME

    and use vi to change corresponding entry for /var/log in /etc/fstab, then
# reboot

M) If flash is new format it:

  # sfdisk -N1 /dev/hda
  ,,L,*
  
  # mke2fs -j -L`hostname` /dev/hda1

  # reboot
  
N) create a .SWAP file on the compact flash

  # dd if=/dev/zero bs=1M count=100 >/cf/.SWAP
  # mkswap /cf/.SWAP
  

O) generate .ssh keys for users

  for each user, login
  mkdir .ssh && cd .ssh &&
  dropbearkey -t rsa -f id_rsa > id_rsa.pub
  scp user@bufflehead:.ssh/id_rsa.pub authorized_keys  #option to add the first


  
?)  What did I forget?!
  Oh, copy the esp application to the esp user's esp2local directory
  
